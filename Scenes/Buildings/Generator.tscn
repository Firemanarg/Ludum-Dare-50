[gd_scene load_steps=18 format=2]

[ext_resource path="res://Scenes/Buildings/Building.tscn" type="PackedScene" id=1]
[ext_resource path="res://Scenes/Models/Spacekit/MachineGeneratorLarge.tscn" type="PackedScene" id=2]
[ext_resource path="res://Scripts/Buildings/Generator.gd" type="Script" id=3]

[sub_resource type="BoxShape" id=19]
extents = Vector3( 1, 0.25, 1 )

[sub_resource type="BoxShape" id=20]
extents = Vector3( 0.8, 0.25, 0.8 )

[sub_resource type="SphereMesh" id=21]
height = 0.6

[sub_resource type="Shader" id=8]
code = "/*
	走査シェーダー by あるる（きのもと 結衣）
	Scanning Shader by Yui Kinomoto @arlez80

	MIT License
*/

shader_type spatial;
render_mode unshaded;

const float PI = 3.1415926535;

uniform vec3 shift = vec3( 0.0, 0.0, 0.0 );
uniform vec3 time_shift_scale = vec3( 0.0, 0.0, 0.0 );
uniform vec4 scan_color : hint_color = vec4( 0.0, 1.0, 0.3, 1.0 );
uniform float scan_line_width : hint_range( 0.0, 1.0 ) = 0.1;
uniform float scan_line_size = 0.05;

varying vec3 local_vertex;

float get_ratio_scan_line( float p )
{
	return max(
		-sin( mod( p, scan_line_size ) / scan_line_size * PI ) + scan_line_width
	,	0.0
	) / scan_line_width;
}

void vertex( )
{
	local_vertex = VERTEX + shift + time_shift_scale * TIME;
}

void fragment( )
{
	float v = clamp(
		get_ratio_scan_line( local_vertex.x )
	+	get_ratio_scan_line( local_vertex.y )
	+	get_ratio_scan_line( local_vertex.z )
	,	0.0
	,	1.0
	);

	ALBEDO = scan_color.rgb;
	ALPHA = scan_color.a * v;
}
"

[sub_resource type="ShaderMaterial" id=22]
shader = SubResource( 8 )
shader_param/shift = Vector3( 0, 0, 0 )
shader_param/time_shift_scale = Vector3( 0.3, 0.2, 0.3 )
shader_param/scan_color = Color( 0.078431, 1, 1, 1 )
shader_param/scan_line_width = 0.5
shader_param/scan_line_size = 0.3

[sub_resource type="SphereMesh" id=14]
radius = 3.0
height = 6.0

[sub_resource type="Shader" id=15]
code = "/*
	魔法防御シェーダー 3 by あるる（きのもと 結衣）
	Magical Shield Shader 3 by Yui Kinomoto @arlez80

	MIT License
*/

shader_type spatial;
render_mode unshaded, depth_draw_never;

uniform vec2 speed = vec2( 0.2, 0.2 );
uniform vec4 barrier_color : hint_color = vec4( 0.05, 0.8, 1.0, 1.0 );
uniform float barrier_force = 1.0;
uniform float barrier_noise_force = 0.6;
uniform float barrier_fog_noise_force = 0.3;
uniform sampler2D barrier_noise : hint_normal;

void fragment( )
{
	float rim = pow( 1.0 - dot( NORMAL, VIEW ), 4.0 ) * barrier_force;

	vec2 p = texture( barrier_noise, -UV ).xy + TIME * speed;
	float line_noise = clamp( ( sin( texture( barrier_noise, p ).r * 3.1415926535 ) - 0.995 ) * 90.0, 0.0, 1.0 ) * barrier_noise_force;

	float fog_noise = texture( barrier_noise, vec2( UV.x * 8.0 - TIME * speed.x, UV.y * 8.0 ) ).r * barrier_fog_noise_force;

	ALBEDO = barrier_color.rgb;
	ALPHA = clamp( rim + line_noise + fog_noise, 0.0, 1.0 );
}"

[sub_resource type="OpenSimplexNoise" id=17]

[sub_resource type="NoiseTexture" id=24]
width = 256
height = 256
noise = SubResource( 17 )

[sub_resource type="ShaderMaterial" id=23]
shader = SubResource( 15 )
shader_param/speed = Vector2( 0.2, 0.2 )
shader_param/barrier_color = Color( 0.87451, 1, 0, 1 )
shader_param/barrier_force = 0.6
shader_param/barrier_noise_force = 0.6
shader_param/barrier_fog_noise_force = 0.1
shader_param/barrier_noise = SubResource( 24 )

[sub_resource type="SphereShape" id=13]
radius = 3.0

[sub_resource type="SphereMesh" id=27]
radius = 3.0
height = 0.4

[sub_resource type="NoiseTexture" id=25]
width = 256
height = 256
noise = SubResource( 17 )

[sub_resource type="ShaderMaterial" id=26]
shader = SubResource( 15 )
shader_param/speed = Vector2( 0.2, 0.2 )
shader_param/barrier_color = Color( 0.87451, 1, 0, 1 )
shader_param/barrier_force = 1.0
shader_param/barrier_noise_force = 1.0
shader_param/barrier_fog_noise_force = 0.1
shader_param/barrier_noise = SubResource( 25 )

[node name="Generator" instance=ExtResource( 1 )]
script = ExtResource( 3 )
building_type = 0
accepted_selector_classes = PoolStringArray( "Cell" )

[node name="CollisionShape" parent="." index="0"]
shape = SubResource( 19 )

[node name="MachineGeneratorLarge" parent="Mesh" index="0" instance=ExtResource( 2 )]
transform = Transform( 1.4, 0, 0, 0, 1.2, 0, 0, 0, 1.2, 0, 0, 0 )

[node name="CollisionShape" parent="CellDetection" index="0"]
shape = SubResource( 20 )

[node name="VisualSelector" parent="." index="3"]
mesh = SubResource( 21 )
material/0 = SubResource( 22 )

[node name="EnergyArea" type="MeshInstance" parent="." index="4"]
transform = Transform( -3.09086e-08, 0.707107, 0.707107, -1, -4.37114e-08, 0, 3.09086e-08, -0.707107, 0.707107, 1, 0, -1 )
mesh = SubResource( 14 )
skeleton = NodePath("../EnergyEmission")
material/0 = SubResource( 23 )

[node name="EnergyEmission" type="Area" parent="." index="5"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, -1 )
collision_layer = 2
collision_mask = 2

[node name="CollisionShape" type="CollisionShape" parent="EnergyEmission" index="0"]
shape = SubResource( 13 )

[node name="MeshInstance" type="MeshInstance" parent="." index="6"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, -1 )
mesh = SubResource( 27 )
material/0 = SubResource( 26 )
